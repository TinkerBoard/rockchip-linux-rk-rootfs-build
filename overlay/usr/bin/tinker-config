#!/bin/bash

INTERACTIVE=True
ASK_TO_REBOOT=0

TOOL_VERSION="2.0.2"
TOOL_NAME="Asus Tinker Edge Software Configuration Tool (tinker-config)"
PROJ_NAME=""
USER_NAME=""

get_hostname() {
    cat /etc/hostname | tr -d " \t\n\r"
}

do_change_hostname() {
  if [ "$INTERACTIVE" = True ]; then
  whiptail --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive),
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen.
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1
  fi
  CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
  if [ "$INTERACTIVE" = True ]; then
    NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
  else
    NEW_HOSTNAME=$1
    true
  fi
  if [ $? -eq 0 ]; then
    echo $NEW_HOSTNAME > /etc/hostname
    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    ASK_TO_REBOOT=1
  fi
}

do_change_pass() {
  whiptail --msgbox "You will now be asked to enter a new password for the $USER_NAME user" 20 60 1
  passwd $USER_NAME &&
  whiptail --msgbox "Password changed successfully" 20 60 1
}

do_update() {
  apt-get update

}

#
# do_internationalisation_menu functions
#

do_change_locale() {
  dpkg-reconfigure locales
  return 0
}

do_change_timezone() {
  dpkg-reconfigure tzdata
  return 0
}

#
# Other functions
#

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error
  # output from tput. However in this case, tput detects neither stdout or
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=20
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-10))
}

do_finish() {
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}

do_internationalisation_menu() {
  FUN=$(whiptail --title "$TOOL_NAME" --menu "Internationalisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "I1 Change Locale" "Set up language and regional settings to match your location" \
    "I2 Change Timezone" "Set up timezone to match your location" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      I1\ *) do_change_locale ;;
      I2\ *) do_change_timezone ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

is_installed() {
    if [ "$(dpkg -l "$1" 2> /dev/null | tail -n 1 | cut -d ' ' -f 1)" != "ii" ]; then
      return 1
    else
      return 0
    fi
}

get_vnc() {
  if systemctl status vncserver.service  | grep -q -w active; then
    echo 0
  else
    echo 1
  fi
}

do_vnc() {              
  # Terminal colors
  NORMAL='\033[0m'
  RED='\033[31m'
  GREEN='\033[32;01m'
  YELLOW='\033[33;01m'
  BLUE='\033[34m'
  PURPLE='\033[1;35m'
  LIGHT_BLUE='\033[1;34m'
  
  STATUS=""
  DEFAULT=--defaultno
  if [ $(get_vnc) -eq 0 ]; then
    DEFAULT=
  fi
  if [ "$INTERACTIVE" = True ]; then
    whiptail --yesno "Would you like the VNC Server to be enabled?" $DEFAULT 20 60 2
    RET=$?
  else
    RET=$1
  fi
  if [ $RET -eq 0 ]; then
    printf "$GREEN [vnc] %s $NORMAL\n" "Install tightvncserver"
    if is_installed tightvncserver || sudo apt-get update && sudo apt-get install xfonts-base tightvncserver autocutsel -y ; then

      if [ -f /root/.vnc/passwd ]; then
        printf "$GREEN [vnc] %s $NORMAL\n" "have old passwd"
      else
        count=0
        while true; do
            count=$(($count+1))
            printf "$GREEN [vnc] %s $NORMAL\n" "Please Input vnc password more than six words."
            vncpasswd
            RET=$?
            if [ $count -gt 4 ]; then
                printf "$RED [result] %s $NORMAL\n" "vnc passwd mistakes too much give up."
                break;
            elif [ $RET -eq 0 ]; then
                if [ ! -d /home/linaro/.vnc ]; then
                  mkdir -p /home/linaro/.vnc
                fi
                
                sudo cp -pdR /root/.vnc/passwd /home/linaro/.vnc/passwd
                sudo chown linaro:linaro /home/linaro/.vnc -R
                printf "$GREEN [vnc] %s $NORMAL\n" "vnc passwd success."
                break;
            elif [ $RET -eq 1 ]; then
                printf "$RED [result] %s $NORMAL\n" "vnc passwd fail, Please Again."
            fi
        done
      fi
      
	cat << EOF > /home/linaro/.vnc/xstartup
#!/bin/sh

xsetroot -solid grey
autocutsel -fork
#x-window-manager &
# Fix to make GNOME work
export XKL_XMODMAP_DISABLE=1
/etc/X11/Xsession
EOF

	sed -i '3ixrdb $HOME/.Xresources' /home/linaro/.vnc/xstartup
	sed -i '6i#x-terminal-emulator -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &' /home/linaro/.vnc/xstartup
    sudo chown linaro:linaro /home/linaro/.vnc/xstartup
    sudo chmod 755 /home/linaro/.vnc/xstartup
    
      echo 'linaro' | sudo -S systemctl enable vncserver.service &&
      echo 'linaro' | sudo -S systemctl start vncserver.service
      #vncserver :1 -geometry 1920x1080 -depth 24 -dpi 120 -alwaysshared
    else
      return 1
    fi
    STATUS="enabled"
  elif [ $RET -eq 1 ]; then
    sudo vncserver -kill :1 
    if is_installed tightvncserver; then
        systemctl disable vncserver.service
        systemctl stop vncserver.service
    fi
    STATUS="disabled"
  else
    return $RET
  fi
  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "The VNC Server is $STATUS 5901 Port." 20 60 1
  fi
}

do_about() {
  whiptail --msgbox "\
Asus Tinker Edge Software Configuration Tool v$TOOL_VERSION \n\nThis tool provides a straight-forward way of doing initial configuration of the Asus $PROJ_NAME. Although it can be run at any time, some of the options may have difficulties if you have heavily customised your installation.\
  " 20 70 1
}

do_interface_menu() {
  FUN=$(whiptail --title "Asus Tinkerboard Software Configuration Tool (tinker-config)" --menu "Interface Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "F1  VNC" "Enable/Disable graphical remote access to your Tinker using TightVNC" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      F1\ *) do_vnc ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

#
# Main function
#

# Everything else needs to be run as root
if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo tinker-config'\n"
  exit 1
fi

#
# Interactive use loop
#
if [ "$INTERACTIVE" = True ]; then
  calc_wt_size

  whiptail --msgbox "Welcome to Asus Tinker Edge Software Configuration Tool (Experimental).

This version is based off the popular version from the SBC (single board computer) community and is still in its development stage.

Currently some features may not be available as they were not originally designed for this board or are still under development. Please understand that you may encounter situations where some features cannot be used.

" $WT_HEIGHT $WT_WIDTH 1

  PROJ_NAME=$( cat /proc/boardinfo )
  if [ "$PROJ_NAME" == "Tinker Edge R" ]; then
    USER_NAME="linaro"
  elif [ "$PROJ_NAME" == "Tinker Edge T" ]; then
    USER_NAME="mendel"
  else
    exit 1
  fi

  while true; do
    FUN=$(whiptail --title "$TOOL_NAME" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
      "1 Hostname" "Set the visible name for this Tinker Board on a network" \
      "2 Change User Password" "Change password for the default user ($USER_NAME)" \
      "3 Internationalisation Options" "Set up language and regional settings to match your location" \
      "4 Interfacing Options" "Configure connections to peripherals" \
      "5 About tinker-config" "Information about this configuration tool" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      do_finish
    elif [ $RET -eq 0 ]; then
      case "$FUN" in
        1\ *) do_change_hostname ;;
        2\ *) do_change_pass ;;
        3\ *) do_internationalisation_menu ;;
        4\ *) do_interface_menu ;;
        5\ *) do_about ;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    else
      exit 1
    fi
  done
fi
